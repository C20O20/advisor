apiVersion: v1
kind: ConfigMap
metadata:
  name: generate-kubeconfig-script
  namespace: alcide-kube-advisor
data:
  set-cluster-context: |
    #!/usr/bin/env bash

    # When running kubectl commands from a pod using a service account token there is no ~/.kube/config cluster context.
    # Many CLI tools relay on ~/.kube/config existence
    # The below script generates ~/.kube/config from a service account token

    cluster_context_name=${1}
    namespace=${2}
    service_account_name=${3}

    # Kubernetes server name goes here
    server=https://kubernetes.default.svc

    # The name of the secret containing the service account token goes here
    name=$(kubectl get secret -n ${namespace} | grep ${service_account_name}-token | awk {'print $1'})
    ca=$(kubectl -n ${namespace} get secret/${name} -o jsonpath='{.data.ca\.crt}')
    token=$(kubectl -n ${namespace} get secret/${name} -o jsonpath='{.data.token}' | base64 -d)

    echo "
    apiVersion: v1
    kind: Config
    clusters:
    - name: ${cluster_context_name}
    cluster:
        certificate-authority-data: ${ca}
        server: ${server}
    contexts:
    - name: ${cluster_context_name}
    context:
        cluster: ${cluster_context_name}
        namespace: default
        user: default-user
    current-context: ${cluster_context_name}
    users:
    - name: default-user
    user:
        token: ${token}
    " > /kube/config